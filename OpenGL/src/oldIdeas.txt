
unsigned int vao;
unsigned int modelVao;
int modelCount;

bool rotation = false;
glm::vec3 color(1, 0, 0);
glm::vec3 lightPosition(1.0, 1.0, -2.0);

Shader *shader;
Texture *texture;
Texture *textureSun;



void loadModel()
{
	// Read file via ASSIMP
	Assimp::Importer importer;
	const aiScene *scene = importer.ReadFile("res/assets/Earth 2K.obj", aiProcess_Triangulate | aiProcess_FlipUVs | aiProcess_GenNormals);

	// Check for errors
	if (!scene || scene->mFlags == AI_SCENE_FLAGS_INCOMPLETE || !scene->mRootNode) // if is Not Zero
	{
		std::cout << "ERROR::ASSIMP:: " << importer.GetErrorString() << std::endl;
		return;
	}

	LOG("MODEL LOADED: " << scene->mNumMeshes << " meshes found");
	
	//SUPPORTING ONE MESH
	aiMesh * mesh = scene->mMeshes[0];

	LOG("NUM OF VERTICES: " << mesh->mNumVertices);

	std::vector<glm::vec3> positions;
	std::vector<glm::vec2> textureCoords;
	std::vector<glm::vec3> normals;
	std::vector<unsigned int> indices;


	for (unsigned int i = 0; i < mesh->mNumVertices; i++)
	{
		positions.push_back(glm::vec3(
			mesh->mVertices[i].x,
			mesh->mVertices[i].y,
			mesh->mVertices[i].z
		));

		// Normals
		normals.push_back(glm::vec3(
			mesh->mNormals[i].x,
			mesh->mNormals[i].y,
			mesh->mNormals[i].z
		));
		
		// Texture Coordinates
		if (mesh->mTextureCoords[0]) // Does the mesh contain texture coordinates?
		{
			textureCoords.push_back(
				glm::vec2(mesh->mTextureCoords[0][i].x, 
					mesh->mTextureCoords[0][i].y
				));
			
		}
		else
		{
			textureCoords.push_back(
				glm::vec2(0, 0));
		}
		
	}

	// Now wak through each of the mesh's faces (a face is a mesh its triangle) and retrieve the corresponding vertex indices.
	for (unsigned int i = 0; i < mesh->mNumFaces; i++)
	{
		aiFace face = mesh->mFaces[i];
		// Retrieve all indices of the face and store them in the indices vector
		for (unsigned int j = 0; j < face.mNumIndices; j++)
		{
			indices.push_back(face.mIndices[j]);
		}
	}


	glGenVertexArrays(1, &modelVao);
	glBindVertexArray(modelVao);
	
	GLuint vertexbuffer;
	glGenBuffers(1, &vertexbuffer);
	glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
	glBufferData(GL_ARRAY_BUFFER, positions.size() * sizeof(glm::vec3), std::data(positions), GL_STATIC_DRAW);

	glEnableVertexAttribArray(0);
	glVertexAttribPointer(
		0,                  // attribute 0. No particular reason for 0, but must match the layout in the shader.
		3,                  // size
		GL_FLOAT,           // type
		GL_FALSE,           // normalized?
		0,                  // stride
		(void*)0            // array buffer offset
	);


	GLuint vertexbufferTextureCoords;
	glGenBuffers(1, &vertexbufferTextureCoords);
	glBindBuffer(GL_ARRAY_BUFFER, vertexbufferTextureCoords);
	glBufferData(GL_ARRAY_BUFFER, textureCoords.size() * sizeof(glm::vec2), std::data(textureCoords), GL_STATIC_DRAW);

	glEnableVertexAttribArray(1);
	glVertexAttribPointer(
		1,                  // attribute 0. No particular reason for 0, but must match the layout in the shader.
		2,                  // size
		GL_FLOAT,           // type
		GL_FALSE,           // normalized?
		0,                  // stride
		(void*)0            // array buffer offset
	);


	GLuint vertexbufferNormals;
	glGenBuffers(1, &vertexbufferNormals);
	glBindBuffer(GL_ARRAY_BUFFER, vertexbufferNormals);
	glBufferData(GL_ARRAY_BUFFER, normals.size() * sizeof(glm::vec3), std::data(normals), GL_STATIC_DRAW);

	glEnableVertexAttribArray(1);
	glVertexAttribPointer(
		2,                  // attribute 0. No particular reason for 0, but must match the layout in the shader.
		3,                  // size
		GL_FLOAT,           // type
		GL_FALSE,           // normalized?
		0,                  // stride
		(void*)0            // array buffer offset
	);

	//glCreateBuffers(1, &m_RendererID); -> just work with opengl 4.5
	unsigned int modelIndices;
	glGenBuffers(1, &modelIndices);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, modelIndices);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), std::data(indices), GL_STATIC_DRAW);

	modelCount = (int) indices.size();
}



float rotationAngle = 0;
double lastTime;


void display(GLFWwindow* window, double currentTime) 
{
	//LOG(currentTime);
	if (rotation)
		rotationAngle += (float)(currentTime - lastTime)* 20;

	glEnable(GL_DEPTH_TEST);
		
	//glClearColor(0.3f, 0.3f, 0.3f, 1.0f);
//	glClearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	//wireframe
	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
		
	shader->bind();

	glm::mat4 projection = glm::perspective(glm::radians(90.0f), 16.0f / 9.0f, 0.1f, 100.f);
	

	glm::mat4 view = glm::rotate(glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, -2.0f, -20.0f)), glm::radians( 0.0f/* -0.523599f */), glm::vec3(1, 0, 0));
	glm::mat4 model = glm::rotate(glm::translate(glm::scale(glm::mat4(1.0f), glm::vec3(2)), glm::vec3(0, 0, 0)), 0.0f, glm::vec3(0, 1, 0));
	glm::mat4 MVP = projection * view * model;

	shader->setUniform("MVP", MVP);
	shader->setUniform("model", model);
	shader->setUniform("color", color);
	shader->setUniform("lightPosition", lightPosition);

	textureSun->Bind();
	shader->setUniform("mytexture", 0);
	
	glBindVertexArray(modelVao);
	//glDrawArrays(GL_TRIANGLES, 0, 3);
	glDrawElements(GL_TRIANGLES, modelCount, GL_UNSIGNED_INT, nullptr);
	//lDrawElementsInstanced(GL_TRIANGLES, modelCount, GL_UNSIGNED_INT, nullptr, 100);


	//earth
	glm::mat4 modelEarth = glm::rotate(glm::translate(glm::scale(glm::mat4(1.0f), glm::vec3(0.3f)), glm::vec3(50, 0, 0)), glm::radians(rotationAngle), glm::vec3(0, 1, 0));
	MVP = projection * view * modelEarth;
	shader->setUniform("MVP", MVP);
	shader->setUniform("model", modelEarth);
	texture->Bind();
	glDrawElements(GL_TRIANGLES, modelCount, GL_UNSIGNED_INT, nullptr);

	lastTime = currentTime;

}

